// <auto-generated />
using System;
using MVCBlogApp.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MVCBlogApp.Persistence.Migrations
{
    [DbContext(typeof(MVCBlogDbContext))]
    partial class MVCBlogDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.AllergyProducingFoods", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Allergen")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dislike")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Like")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MembersInformationID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("MembersInformationID");

                    b.ToTable("AllergyProducingFoods");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.AppointmentDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("AppointmentID")
                        .HasColumnType("int");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("History")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MembersID")
                        .HasColumnType("int");

                    b.Property<decimal>("OilRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Size")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Treatment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.HasIndex("AppointmentID");

                    b.HasIndex("MembersID");

                    b.HasIndex("UserID");

                    b.ToTable("AppointmentDetail");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.Article", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ArticleCategoryID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime?>("ArticleDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("AuthorUserID")
                        .HasColumnType("int");

                    b.Property<string>("Controller")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoverImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreateUserID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FontAwesomeIcon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsComponent")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMainPage")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMenu")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsNewsComponent")
                        .HasColumnType("bit");

                    b.Property<int?>("LangID")
                        .HasColumnType("int");

                    b.Property<string>("MetaDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NavigationID")
                        .HasColumnType("int");

                    b.Property<int?>("Orders")
                        .HasColumnType("int");

                    b.Property<int?>("StatusID")
                        .HasColumnType("int");

                    b.Property<string>("SubTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdateUserID")
                        .HasColumnType("int");

                    b.Property<string>("UrlRoot")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ArticleCategoryID");

                    b.HasIndex("LangID");

                    b.HasIndex("StatusID");

                    b.ToTable("Article");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.ArticleCategory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreateUserID")
                        .HasColumnType("int");

                    b.Property<int?>("LangID")
                        .HasColumnType("int");

                    b.Property<string>("MetaDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentID")
                        .HasColumnType("int");

                    b.Property<int?>("StatusID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("StatusID");

                    b.ToTable("ArticleCategory");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.Auth", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("AuthName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Auth");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.Banner", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("BannerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BannerOrder")
                        .HasColumnType("int");

                    b.Property<string>("BannerUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DateString")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LangID")
                        .HasColumnType("int");

                    b.Property<int>("StatusID")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("LangID");

                    b.ToTable("Banner");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.Blog", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BlogCategoryID")
                        .HasColumnType("int");

                    b.Property<int?>("BlogTypeID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Contents")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Controller")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoverImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreateUserID")
                        .HasColumnType("int");

                    b.Property<bool>("IsComponent")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMainPage")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMenu")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsNewsComponent")
                        .HasColumnType("bit");

                    b.Property<int?>("LangID")
                        .HasColumnType("int");

                    b.Property<string>("MetaDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NavigationID")
                        .HasColumnType("int");

                    b.Property<int?>("Orders")
                        .HasColumnType("int");

                    b.Property<int?>("StatusID")
                        .HasColumnType("int");

                    b.Property<string>("SubTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdateUserID")
                        .HasColumnType("int");

                    b.Property<string>("UrlRoot")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("BlogTypeID");

                    b.HasIndex("CreateUserID");

                    b.HasIndex("LangID");

                    b.HasIndex("StatusID");

                    b.ToTable("Blog");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.BlogCategory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CategoryDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LangID")
                        .HasColumnType("int");

                    b.Property<int>("StatusID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("StatusID");

                    b.ToTable("BlogCategory");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.BlogType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("BlogType");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.Book", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BookName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Controller")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreateUserID")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsMainPage")
                        .HasColumnType("bit");

                    b.Property<int>("LangID")
                        .HasColumnType("int");

                    b.Property<int?>("NavigationID")
                        .HasColumnType("int");

                    b.Property<int?>("Orders")
                        .HasColumnType("int");

                    b.Property<int?>("PublicationYear")
                        .HasColumnType("int");

                    b.Property<int?>("StatusID")
                        .HasColumnType("int");

                    b.Property<string>("UrlRoot")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("LangID");

                    b.HasIndex("StatusID");

                    b.ToTable("Book");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.BookCategory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreateUserID")
                        .HasColumnType("int");

                    b.Property<int?>("StatusID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("StatusID");

                    b.ToTable("BookCategory");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.CalcBMI", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Result")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("CalcBMI");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.CalcBmh", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Result")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("CalcBmh");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.CalcOptimum", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Result1")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Result2")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Result3")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Result4")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("CalcOptimum");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.CalcPulse", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ResultMax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ResultMin")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.ToTable("CalcPulse");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.Carousel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Controller")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreateUserID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LangID")
                        .HasColumnType("int");

                    b.Property<string>("MetaDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Orders")
                        .HasColumnType("int");

                    b.Property<int?>("StatusID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleClass")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlRoot")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("LangID");

                    b.HasIndex("StatusID");

                    b.ToTable("Carousel");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.Case", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CaseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LangID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Case");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.Confession", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreateDatetime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAprove")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<string>("MemberConfession")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MemberName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Confession");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.ConsultancyForm", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("ConsultancyFormTypeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusID")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ConsultancyFormTypeID");

                    b.ToTable("ConsultancyForm");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.ConsultancyFormType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("ConsultancyFormTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("ConsultancyFormType");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.Contact", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("ContactCategoryID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("NameSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StatusID")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ContactCategoryID");

                    b.HasIndex("StatusID");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.ContactCategory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("ContactCategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LangID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("ContactCategory");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.D_Appointment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreateUserID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Interval")
                        .HasColumnType("int");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("MembersID")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("StatusID")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("MembersID");

                    b.HasIndex("UserID");

                    b.ToTable("D_Appointment");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.D_Specialties", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Specialties")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("D_Specialties");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.Days", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("DayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Days");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.DietList", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("AppointmentDetailID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AppointmentDetailID");

                    b.HasIndex("UserID");

                    b.ToTable("DietList");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.Diseases", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("DiseasesName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Diseases");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.DiseasesCardiovascular", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("DiseasesID")
                        .HasColumnType("int");

                    b.Property<int>("MembersInformationID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DiseasesID");

                    b.HasIndex("MembersInformationID");

                    b.ToTable("DiseasesCardiovascular");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.DiseasesDiabetes", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("DiseasesID")
                        .HasColumnType("int");

                    b.Property<int>("MembersInformationID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DiseasesID");

                    b.HasIndex("MembersInformationID");

                    b.ToTable("DiseasesDiabetes");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.DiseasesDigestiveDisorders", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("DiseasesID")
                        .HasColumnType("int");

                    b.Property<int>("MembersInformationID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DiseasesID");

                    b.HasIndex("MembersInformationID");

                    b.ToTable("DiseasesDigestiveDisorders");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.DiseasesFamilyMembers", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("DiseasesID")
                        .HasColumnType("int");

                    b.Property<int>("MembersInformationID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DiseasesID");

                    b.HasIndex("MembersInformationID");

                    b.ToTable("DiseasesFamilyMembers");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.Event", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreateUserID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EventCategoryID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("FinishDatetime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDatetime")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("EventCategoryID");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.EventCategory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("EventCategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventClassName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("EventCategory");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.Examination", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("ExaminationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Examination");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.FemaleMentalState", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("BreastFeeding")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gravidity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsBreastFeedingPeriod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsGiveBirthTo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsHormontherapy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsMenstruatioRegular")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MembersInformationID")
                        .HasColumnType("int");

                    b.Property<string>("Menopause")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Menstruation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("MembersInformationID");

                    b.ToTable("FemaleMentalState");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.FixBMI", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FormID")
                        .HasColumnType("int");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LangID")
                        .HasColumnType("int");

                    b.Property<int>("StatusID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("FormID");

                    b.ToTable("FixBMI");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.FixBmh", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FormID")
                        .HasColumnType("int");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LangID")
                        .HasColumnType("int");

                    b.Property<int>("StatusID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("FormID");

                    b.ToTable("FixBmh");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.FixCalorieSch", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FormID")
                        .HasColumnType("int");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LangID")
                        .HasColumnType("int");

                    b.Property<int>("StatusID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("FormID");

                    b.ToTable("FixCalorieSch");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.FixFeedPyramid", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FormID")
                        .HasColumnType("int");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LangID")
                        .HasColumnType("int");

                    b.Property<int>("StatusID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("FormID");

                    b.ToTable("FixFeedPyramid");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.FixHeartDiseases", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FormID")
                        .HasColumnType("int");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LangID")
                        .HasColumnType("int");

                    b.Property<int>("StatusID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("FormID");

                    b.ToTable("FixHeartDiseases");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.FixMealSize", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FormID")
                        .HasColumnType("int");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LangID")
                        .HasColumnType("int");

                    b.Property<int>("StatusID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("FormID");

                    b.ToTable("FixMealSize");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.FixOptimum", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FormID")
                        .HasColumnType("int");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LangID")
                        .HasColumnType("int");

                    b.Property<int>("StatusID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("FormID");

                    b.ToTable("FixOptimum");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.FixPulse", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FormID")
                        .HasColumnType("int");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LangID")
                        .HasColumnType("int");

                    b.Property<int>("StatusID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("FormID");

                    b.ToTable("FixPulse");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.FoodHabitMood", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool?>("All")
                        .HasColumnType("bit");

                    b.Property<bool?>("Doomy")
                        .HasColumnType("bit");

                    b.Property<bool?>("Happy")
                        .HasColumnType("bit");

                    b.Property<int>("MembersInformationID")
                        .HasColumnType("int");

                    b.Property<bool?>("Sad")
                        .HasColumnType("bit");

                    b.Property<bool?>("Stress")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("MembersInformationID");

                    b.ToTable("FoodHabitMood");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.FoodHabits", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Breakfast")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BreakfastSnack")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dinner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DinnerSnack")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lunch")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LunchSnack")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MembersInformationID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("MembersInformationID");

                    b.ToTable("FoodHabits");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.FoodTime", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("MembersInformationID")
                        .HasColumnType("int");

                    b.Property<string>("WeekdayMorning")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WeekdayNight")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WeekdayNoon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WeekendMorning")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WeekendNight")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WeekendNoon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("MembersInformationID");

                    b.ToTable("FoodTime");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.Form", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Controller")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FormName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LangID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Form");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.Genders", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LangID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.HearAboutUS", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("HearAboutUSName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LangID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("HearAboutUS");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.Image", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreateUserID")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCover")
                        .HasColumnType("bit");

                    b.Property<int?>("StatusID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("StatusID");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.ImageBlog", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("BlogID")
                        .HasColumnType("int");

                    b.Property<string>("ImgName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCover")
                        .HasColumnType("bit");

                    b.Property<int>("StatusID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("BlogID");

                    b.ToTable("ImageBlog");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.ImageCarousel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CarouselID")
                        .HasColumnType("int");

                    b.Property<string>("ImgName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CarouselID");

                    b.ToTable("ImageCarousel");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.Influencer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanySector")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDatetime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Influencer");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.Lab", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("AppointmentDetailID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LabDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("MembersID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsersID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("MembersID");

                    b.HasIndex("UsersID");

                    b.ToTable("Lab");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.Languages", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.MasterRoot", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Controller")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlRoot")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("MasterRoot");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.Meal", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("MealName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Meal");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.Members", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreateUserID")
                        .HasColumnType("int");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Lacation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MembersAuthID")
                        .HasColumnType("int");

                    b.Property<string>("NameSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("MembersAuthID");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.MembersAuth", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MembersAuthName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("MembersAuth");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.MembersDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("BirtDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("FatRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MembersID")
                        .HasColumnType("int");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("size")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("MembersID")
                        .IsUnique();

                    b.ToTable("MembersDetail");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.MembersInformation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("CPreviousDisease")
                        .HasColumnType("bit");

                    b.Property<int?>("ConsumedVegetables")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("DidYouGainWeightInTheArmy")
                        .HasColumnType("bit");

                    b.Property<string>("DoYouHaveHormonalProblem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("DoYouUseCigarettes")
                        .HasColumnType("bit");

                    b.Property<string>("DoYouUseVitaminAndMinerals")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FoodLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FoodMade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GetDrugged")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("HaveYouGainedWeight")
                        .HasColumnType("bit");

                    b.Property<string>("HistoryOfWeigh")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HowDoYouFeel")
                        .HasColumnType("int");

                    b.Property<int?>("HowFrequencyOfActivity")
                        .HasColumnType("int");

                    b.Property<int?>("HowIsYourEnergy")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsBloodCoagulationDisorders")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Job")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManTheNeedForEatingVaries")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MembersID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OneDaySummary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TheQuantityConsumedAlchol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TheQuantityConsumedCoffe")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TheQuantityConsumedFizzy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TheQuantityConsumedTea")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TheQuantityConsumedWater")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("MembersInformation");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.Navigation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Controller")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FontAwesomeIcon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsHeader")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSubHeader")
                        .HasColumnType("bit");

                    b.Property<int>("LangID")
                        .HasColumnType("int");

                    b.Property<string>("MetaKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NavigationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParentID")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UrlRoot")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("LangID");

                    b.ToTable("Navigation");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.NewsBulletin", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreateUserID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StatusID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("StatusID");

                    b.ToTable("NewsBulletin");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.NewsPaper", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("LangID")
                        .HasColumnType("int");

                    b.Property<string>("NewsPaperName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StatusID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("StatusID");

                    b.ToTable("NewsPaper");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.OurTeam", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreateUserID")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LangID")
                        .HasColumnType("int");

                    b.Property<string>("NameSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StatusID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("StatusID");

                    b.ToTable("OurTeam");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.Press", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LangID")
                        .HasColumnType("int");

                    b.Property<string>("MetaDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NewsPaperID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("PressTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("StatusID")
                        .HasColumnType("int");

                    b.Property<string>("SubTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("urlRoot")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("LangID");

                    b.HasIndex("NewsPaperID");

                    b.HasIndex("PressTypeID");

                    b.HasIndex("StatusID");

                    b.ToTable("Press");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.PressType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("PressTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("PressType");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.References", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreateUserID")
                        .HasColumnType("int");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("References");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.ResultBMI", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("IntervalDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("IntervalMax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("IntervalMin")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.ToTable("ResultBMI");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.ResultBMh", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Resulttext")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("ResultBMh");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.ResultOptimum", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Result1text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Result2text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Result3text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Result4text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("ResultOptimum");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.ResultPulse", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("ResultMaxText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResultMinText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("ResultPulse");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.SLeftNavigation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("LangID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("SLeftNavigation");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.SeminarVisuals", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LangID")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("LangID");

                    b.HasIndex("StatusID");

                    b.ToTable("SeminarVisuals");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.Status", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.TaylanK", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("About")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Facebook")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoogleMap")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instagram")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LangID")
                        .HasColumnType("int");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Metadescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Metakey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Metatitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pinterest")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusID")
                        .HasColumnType("int");

                    b.Property<string>("Twitter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("LangID");

                    b.HasIndex("StatusID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("TaylanK");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("AuthID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreateUserID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedUserID")
                        .HasColumnType("int");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("AuthID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.Video", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreateUserID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LangID")
                        .HasColumnType("int");

                    b.Property<int?>("StatusID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VideoCategoryID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("VideoEmbedCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("LangID");

                    b.HasIndex("StatusID");

                    b.HasIndex("VideoCategoryID");

                    b.ToTable("Video");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.VideoCategory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("StatusID")
                        .HasColumnType("int");

                    b.Property<string>("VideoCategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("StatusID");

                    b.ToTable("VideoCategory");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.WorkShopApplicationForm", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AttendancePurpose")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Diet")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<int>("HearAboutusID")
                        .HasColumnType("int");

                    b.Property<bool>("IsApprove")
                        .HasColumnType("bit");

                    b.Property<string>("Job")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LifeContented")
                        .HasColumnType("int");

                    b.Property<string>("NameSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkShopID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("HearAboutusID");

                    b.HasIndex("WorkShopID");

                    b.ToTable("WorkShopApplicationForm");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.Workshop", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreateUserID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FinishDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("LangID")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("StatusID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WSEducationID")
                        .HasColumnType("int");

                    b.Property<int>("WSTypeID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("LangID");

                    b.HasIndex("WSEducationID");

                    b.HasIndex("WSTypeID");

                    b.ToTable("Workshop");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.WorkshopCategory", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<int>("LangID")
                        .HasColumnType("int");

                    b.Property<string>("WSCategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("WorkshopCategory");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.WorkshopEducation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("LangID")
                        .HasColumnType("int");

                    b.Property<int>("StatusID")
                        .HasColumnType("int");

                    b.Property<int>("WSCategoryID")
                        .HasColumnType("int");

                    b.Property<string>("WsEducationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("LangID");

                    b.ToTable("WorkshopEducation");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.WorkshopType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("WSTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("WorkshopType");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.X_BlogCategory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("BlogCategoryID")
                        .HasColumnType("int");

                    b.Property<int>("BlogID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("BlogCategoryID");

                    b.HasIndex("BlogID");

                    b.ToTable("X_BlogCategory");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.X_BookCategory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("BookCategoryID")
                        .HasColumnType("int");

                    b.Property<int>("BookID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("BookCategoryID");

                    b.HasIndex("BookID");

                    b.ToTable("X_BookCategory");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities._DaysMeal", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("DaysID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DietListID")
                        .HasColumnType("int");

                    b.Property<int>("MealID")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("TimeInterval")
                        .HasColumnType("time");

                    b.HasKey("ID");

                    b.HasIndex("DaysID");

                    b.HasIndex("DietListID");

                    b.HasIndex("MealID");

                    b.ToTable("_DaysMeal");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities._Examination", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("ExaminationID")
                        .HasColumnType("int");

                    b.Property<int>("LabID")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ExaminationID");

                    b.HasIndex("LabID");

                    b.ToTable("_Examination");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.AllergyProducingFoods", b =>
                {
                    b.HasOne("MVCBlogApp.Domain.Entities.MembersInformation", "MembersInformation")
                        .WithMany("AllergyProducingFoods")
                        .HasForeignKey("MembersInformationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MembersInformation");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.AppointmentDetail", b =>
                {
                    b.HasOne("MVCBlogApp.Domain.Entities.D_Appointment", "D_Appointment")
                        .WithMany("AppointmentDetail")
                        .HasForeignKey("AppointmentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MVCBlogApp.Domain.Entities.Members", "Members")
                        .WithMany("AppointmentDetail")
                        .HasForeignKey("MembersID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MVCBlogApp.Domain.Entities.User", "User")
                        .WithMany("AppointmentDetail")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("D_Appointment");

                    b.Navigation("Members");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.Article", b =>
                {
                    b.HasOne("MVCBlogApp.Domain.Entities.ArticleCategory", "ArticleCategory")
                        .WithMany("Article")
                        .HasForeignKey("ArticleCategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MVCBlogApp.Domain.Entities.Languages", "Languages")
                        .WithMany("Article")
                        .HasForeignKey("LangID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MVCBlogApp.Domain.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ArticleCategory");

                    b.Navigation("Languages");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.ArticleCategory", b =>
                {
                    b.HasOne("MVCBlogApp.Domain.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Status");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.Banner", b =>
                {
                    b.HasOne("MVCBlogApp.Domain.Entities.Languages", "Languages")
                        .WithMany("Banner")
                        .HasForeignKey("LangID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Languages");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.Blog", b =>
                {
                    b.HasOne("MVCBlogApp.Domain.Entities.BlogType", "BlogType")
                        .WithMany("Blogs")
                        .HasForeignKey("BlogTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MVCBlogApp.Domain.Entities.User", "User")
                        .WithMany("Blog")
                        .HasForeignKey("CreateUserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MVCBlogApp.Domain.Entities.Languages", "Languages")
                        .WithMany("Blogs")
                        .HasForeignKey("LangID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MVCBlogApp.Domain.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("BlogType");

                    b.Navigation("Languages");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.BlogCategory", b =>
                {
                    b.HasOne("MVCBlogApp.Domain.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.Book", b =>
                {
                    b.HasOne("MVCBlogApp.Domain.Entities.Languages", "Languages")
                        .WithMany("Books")
                        .HasForeignKey("LangID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MVCBlogApp.Domain.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Languages");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.BookCategory", b =>
                {
                    b.HasOne("MVCBlogApp.Domain.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Status");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.Carousel", b =>
                {
                    b.HasOne("MVCBlogApp.Domain.Entities.Languages", "Languages")
                        .WithMany("Carousel")
                        .HasForeignKey("LangID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MVCBlogApp.Domain.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Languages");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.ConsultancyForm", b =>
                {
                    b.HasOne("MVCBlogApp.Domain.Entities.ConsultancyFormType", "ConsultancyFormType")
                        .WithMany("ConsultancyForm")
                        .HasForeignKey("ConsultancyFormTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ConsultancyFormType");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.Contact", b =>
                {
                    b.HasOne("MVCBlogApp.Domain.Entities.ContactCategory", "ContactCategory")
                        .WithMany("Contacts")
                        .HasForeignKey("ContactCategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MVCBlogApp.Domain.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ContactCategory");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.D_Appointment", b =>
                {
                    b.HasOne("MVCBlogApp.Domain.Entities.Members", "Members")
                        .WithMany("D_Appointment")
                        .HasForeignKey("MembersID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MVCBlogApp.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Members");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.DietList", b =>
                {
                    b.HasOne("MVCBlogApp.Domain.Entities.AppointmentDetail", "AppointmentDetail")
                        .WithMany("DietList")
                        .HasForeignKey("AppointmentDetailID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MVCBlogApp.Domain.Entities.User", "Users")
                        .WithMany("DietLists")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AppointmentDetail");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.DiseasesCardiovascular", b =>
                {
                    b.HasOne("MVCBlogApp.Domain.Entities.Diseases", "Diseases")
                        .WithMany("DiseasesCardiovasculars")
                        .HasForeignKey("DiseasesID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MVCBlogApp.Domain.Entities.MembersInformation", "MembersInformation")
                        .WithMany("DiseasesCardiovasculars")
                        .HasForeignKey("MembersInformationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Diseases");

                    b.Navigation("MembersInformation");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.DiseasesDiabetes", b =>
                {
                    b.HasOne("MVCBlogApp.Domain.Entities.Diseases", "Diseases")
                        .WithMany("DiseasesDiabetes")
                        .HasForeignKey("DiseasesID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MVCBlogApp.Domain.Entities.MembersInformation", "MembersInformation")
                        .WithMany("DiseasesDiabetes")
                        .HasForeignKey("MembersInformationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Diseases");

                    b.Navigation("MembersInformation");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.DiseasesDigestiveDisorders", b =>
                {
                    b.HasOne("MVCBlogApp.Domain.Entities.Diseases", "Diseases")
                        .WithMany("DiseasesDigestiveDisorders")
                        .HasForeignKey("DiseasesID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MVCBlogApp.Domain.Entities.MembersInformation", "MembersInformation")
                        .WithMany("DiseasesDigestiveDisorders")
                        .HasForeignKey("MembersInformationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Diseases");

                    b.Navigation("MembersInformation");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.DiseasesFamilyMembers", b =>
                {
                    b.HasOne("MVCBlogApp.Domain.Entities.Diseases", "Diseases")
                        .WithMany("DiseasesFamilyMembers")
                        .HasForeignKey("DiseasesID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MVCBlogApp.Domain.Entities.MembersInformation", "MembersInformation")
                        .WithMany("DiseasesFamilyMembers")
                        .HasForeignKey("MembersInformationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Diseases");

                    b.Navigation("MembersInformation");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.Event", b =>
                {
                    b.HasOne("MVCBlogApp.Domain.Entities.EventCategory", "EventCategory")
                        .WithMany("Event")
                        .HasForeignKey("EventCategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EventCategory");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.FemaleMentalState", b =>
                {
                    b.HasOne("MVCBlogApp.Domain.Entities.MembersInformation", "MembersInformation")
                        .WithMany("FemaleMentalStates")
                        .HasForeignKey("MembersInformationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MembersInformation");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.FixBMI", b =>
                {
                    b.HasOne("MVCBlogApp.Domain.Entities.Form", "Form")
                        .WithMany("FixBMIs")
                        .HasForeignKey("FormID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Form");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.FixBmh", b =>
                {
                    b.HasOne("MVCBlogApp.Domain.Entities.Form", "Form")
                        .WithMany("FixBmhs")
                        .HasForeignKey("FormID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Form");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.FixCalorieSch", b =>
                {
                    b.HasOne("MVCBlogApp.Domain.Entities.Form", "Form")
                        .WithMany("FixCalorieSches")
                        .HasForeignKey("FormID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Form");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.FixFeedPyramid", b =>
                {
                    b.HasOne("MVCBlogApp.Domain.Entities.Form", "Form")
                        .WithMany("FixFeedPyramids")
                        .HasForeignKey("FormID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Form");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.FixHeartDiseases", b =>
                {
                    b.HasOne("MVCBlogApp.Domain.Entities.Form", "Form")
                        .WithMany("FixHeartDiseases")
                        .HasForeignKey("FormID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Form");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.FixMealSize", b =>
                {
                    b.HasOne("MVCBlogApp.Domain.Entities.Form", "Form")
                        .WithMany("FixMealSizes")
                        .HasForeignKey("FormID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Form");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.FixOptimum", b =>
                {
                    b.HasOne("MVCBlogApp.Domain.Entities.Form", "Form")
                        .WithMany("FixOptimums")
                        .HasForeignKey("FormID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Form");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.FixPulse", b =>
                {
                    b.HasOne("MVCBlogApp.Domain.Entities.Form", "Form")
                        .WithMany("FixPulses")
                        .HasForeignKey("FormID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Form");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.FoodHabitMood", b =>
                {
                    b.HasOne("MVCBlogApp.Domain.Entities.MembersInformation", "MembersInformation")
                        .WithMany("FoodHabitsMoods")
                        .HasForeignKey("MembersInformationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MembersInformation");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.FoodHabits", b =>
                {
                    b.HasOne("MVCBlogApp.Domain.Entities.MembersInformation", "MembersInformation")
                        .WithMany("FoodHabits")
                        .HasForeignKey("MembersInformationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MembersInformation");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.FoodTime", b =>
                {
                    b.HasOne("MVCBlogApp.Domain.Entities.MembersInformation", "MembersInformation")
                        .WithMany("FoodTimes")
                        .HasForeignKey("MembersInformationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MembersInformation");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.Image", b =>
                {
                    b.HasOne("MVCBlogApp.Domain.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Status");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.ImageBlog", b =>
                {
                    b.HasOne("MVCBlogApp.Domain.Entities.Blog", null)
                        .WithMany("ImageBlog")
                        .HasForeignKey("BlogID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.ImageCarousel", b =>
                {
                    b.HasOne("MVCBlogApp.Domain.Entities.Carousel", "Carousel")
                        .WithMany("ImageCarousels")
                        .HasForeignKey("CarouselID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Carousel");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.Lab", b =>
                {
                    b.HasOne("MVCBlogApp.Domain.Entities.Members", "Members")
                        .WithMany("Lab")
                        .HasForeignKey("MembersID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MVCBlogApp.Domain.Entities.User", "User")
                        .WithMany("Lab")
                        .HasForeignKey("UsersID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Members");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.Members", b =>
                {
                    b.HasOne("MVCBlogApp.Domain.Entities.MembersAuth", "MembersAuth")
                        .WithMany("Members")
                        .HasForeignKey("MembersAuthID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MembersAuth");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.MembersDetail", b =>
                {
                    b.HasOne("MVCBlogApp.Domain.Entities.Members", "Members")
                        .WithOne("MembersDetail")
                        .HasForeignKey("MVCBlogApp.Domain.Entities.MembersDetail", "MembersID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Members");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.Navigation", b =>
                {
                    b.HasOne("MVCBlogApp.Domain.Entities.Languages", "Languages")
                        .WithMany("Navigation")
                        .HasForeignKey("LangID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Languages");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.NewsBulletin", b =>
                {
                    b.HasOne("MVCBlogApp.Domain.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Status");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.NewsPaper", b =>
                {
                    b.HasOne("MVCBlogApp.Domain.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Status");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.OurTeam", b =>
                {
                    b.HasOne("MVCBlogApp.Domain.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Status");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.Press", b =>
                {
                    b.HasOne("MVCBlogApp.Domain.Entities.Languages", "Languages")
                        .WithMany("Presses")
                        .HasForeignKey("LangID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MVCBlogApp.Domain.Entities.NewsPaper", "NewsPaper")
                        .WithMany("Press")
                        .HasForeignKey("NewsPaperID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MVCBlogApp.Domain.Entities.PressType", "PressType")
                        .WithMany("Press")
                        .HasForeignKey("PressTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MVCBlogApp.Domain.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Languages");

                    b.Navigation("NewsPaper");

                    b.Navigation("PressType");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.SeminarVisuals", b =>
                {
                    b.HasOne("MVCBlogApp.Domain.Entities.Languages", "Languages")
                        .WithMany("SeminarVisuals")
                        .HasForeignKey("LangID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MVCBlogApp.Domain.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Languages");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.TaylanK", b =>
                {
                    b.HasOne("MVCBlogApp.Domain.Entities.Languages", "Languages")
                        .WithMany("TaylanK")
                        .HasForeignKey("LangID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MVCBlogApp.Domain.Entities.Status", "Status")
                        .WithMany("TaylanK")
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MVCBlogApp.Domain.Entities.User", "User")
                        .WithOne("TaylanK")
                        .HasForeignKey("MVCBlogApp.Domain.Entities.TaylanK", "UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Languages");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.User", b =>
                {
                    b.HasOne("MVCBlogApp.Domain.Entities.Auth", "Auth")
                        .WithMany("User")
                        .HasForeignKey("AuthID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Auth");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.Video", b =>
                {
                    b.HasOne("MVCBlogApp.Domain.Entities.Languages", "Languages")
                        .WithMany("Video")
                        .HasForeignKey("LangID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MVCBlogApp.Domain.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MVCBlogApp.Domain.Entities.VideoCategory", "VideoCategory")
                        .WithMany("Videos")
                        .HasForeignKey("VideoCategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Languages");

                    b.Navigation("Status");

                    b.Navigation("VideoCategory");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.VideoCategory", b =>
                {
                    b.HasOne("MVCBlogApp.Domain.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Status");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.WorkShopApplicationForm", b =>
                {
                    b.HasOne("MVCBlogApp.Domain.Entities.HearAboutUS", "HearAboutUS")
                        .WithMany("WorkShopApplicationForm")
                        .HasForeignKey("HearAboutusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MVCBlogApp.Domain.Entities.Workshop", "Workshop")
                        .WithMany("WorkShopApplicationForm")
                        .HasForeignKey("WorkShopID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("HearAboutUS");

                    b.Navigation("Workshop");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.Workshop", b =>
                {
                    b.HasOne("MVCBlogApp.Domain.Entities.Languages", "Languages")
                        .WithMany("Workshops")
                        .HasForeignKey("LangID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MVCBlogApp.Domain.Entities.WorkshopEducation", "WorkshopEducation")
                        .WithMany("Workshop")
                        .HasForeignKey("WSEducationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MVCBlogApp.Domain.Entities.WorkshopType", "WorkshopType")
                        .WithMany("WorkShop")
                        .HasForeignKey("WSTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Languages");

                    b.Navigation("WorkshopEducation");

                    b.Navigation("WorkshopType");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.WorkshopCategory", b =>
                {
                    b.HasOne("MVCBlogApp.Domain.Entities.WorkshopEducation", "WorkshopEducation")
                        .WithMany("WorkshopCategory")
                        .HasForeignKey("ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("WorkshopEducation");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.WorkshopEducation", b =>
                {
                    b.HasOne("MVCBlogApp.Domain.Entities.Languages", "Languages")
                        .WithMany("WorkshopEducations")
                        .HasForeignKey("LangID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Languages");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.X_BlogCategory", b =>
                {
                    b.HasOne("MVCBlogApp.Domain.Entities.BlogCategory", "BlogCategory")
                        .WithMany("X_BlogCategory")
                        .HasForeignKey("BlogCategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MVCBlogApp.Domain.Entities.Blog", "Blog")
                        .WithMany("X_BlogCategory")
                        .HasForeignKey("BlogID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("BlogCategory");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.X_BookCategory", b =>
                {
                    b.HasOne("MVCBlogApp.Domain.Entities.BookCategory", "BookCategory")
                        .WithMany("X_BookCategories")
                        .HasForeignKey("BookCategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MVCBlogApp.Domain.Entities.Book", "Book")
                        .WithMany("X_BookCategories")
                        .HasForeignKey("BookID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("BookCategory");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities._DaysMeal", b =>
                {
                    b.HasOne("MVCBlogApp.Domain.Entities.Days", "Days")
                        .WithMany("_DaysMeal")
                        .HasForeignKey("DaysID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MVCBlogApp.Domain.Entities.DietList", "DietList")
                        .WithMany("_DaysMeal")
                        .HasForeignKey("DietListID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MVCBlogApp.Domain.Entities.Meal", "Meal")
                        .WithMany("_DaysMeal")
                        .HasForeignKey("MealID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Days");

                    b.Navigation("DietList");

                    b.Navigation("Meal");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities._Examination", b =>
                {
                    b.HasOne("MVCBlogApp.Domain.Entities.Examination", "Examination")
                        .WithMany("_Examination")
                        .HasForeignKey("ExaminationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MVCBlogApp.Domain.Entities.Lab", "Lab")
                        .WithMany("_Examination")
                        .HasForeignKey("LabID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Examination");

                    b.Navigation("Lab");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.AppointmentDetail", b =>
                {
                    b.Navigation("DietList");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.ArticleCategory", b =>
                {
                    b.Navigation("Article");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.Auth", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.Blog", b =>
                {
                    b.Navigation("ImageBlog");

                    b.Navigation("X_BlogCategory");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.BlogCategory", b =>
                {
                    b.Navigation("X_BlogCategory");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.BlogType", b =>
                {
                    b.Navigation("Blogs");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.Book", b =>
                {
                    b.Navigation("X_BookCategories");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.BookCategory", b =>
                {
                    b.Navigation("X_BookCategories");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.Carousel", b =>
                {
                    b.Navigation("ImageCarousels");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.ConsultancyFormType", b =>
                {
                    b.Navigation("ConsultancyForm");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.ContactCategory", b =>
                {
                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.D_Appointment", b =>
                {
                    b.Navigation("AppointmentDetail");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.Days", b =>
                {
                    b.Navigation("_DaysMeal");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.DietList", b =>
                {
                    b.Navigation("_DaysMeal");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.Diseases", b =>
                {
                    b.Navigation("DiseasesCardiovasculars");

                    b.Navigation("DiseasesDiabetes");

                    b.Navigation("DiseasesDigestiveDisorders");

                    b.Navigation("DiseasesFamilyMembers");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.EventCategory", b =>
                {
                    b.Navigation("Event");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.Examination", b =>
                {
                    b.Navigation("_Examination");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.Form", b =>
                {
                    b.Navigation("FixBMIs");

                    b.Navigation("FixBmhs");

                    b.Navigation("FixCalorieSches");

                    b.Navigation("FixFeedPyramids");

                    b.Navigation("FixHeartDiseases");

                    b.Navigation("FixMealSizes");

                    b.Navigation("FixOptimums");

                    b.Navigation("FixPulses");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.HearAboutUS", b =>
                {
                    b.Navigation("WorkShopApplicationForm");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.Lab", b =>
                {
                    b.Navigation("_Examination");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.Languages", b =>
                {
                    b.Navigation("Article");

                    b.Navigation("Banner");

                    b.Navigation("Blogs");

                    b.Navigation("Books");

                    b.Navigation("Carousel");

                    b.Navigation("Navigation");

                    b.Navigation("Presses");

                    b.Navigation("SeminarVisuals");

                    b.Navigation("TaylanK");

                    b.Navigation("Video");

                    b.Navigation("WorkshopEducations");

                    b.Navigation("Workshops");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.Meal", b =>
                {
                    b.Navigation("_DaysMeal");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.Members", b =>
                {
                    b.Navigation("AppointmentDetail");

                    b.Navigation("D_Appointment");

                    b.Navigation("Lab");

                    b.Navigation("MembersDetail")
                        .IsRequired();
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.MembersAuth", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.MembersInformation", b =>
                {
                    b.Navigation("AllergyProducingFoods");

                    b.Navigation("DiseasesCardiovasculars");

                    b.Navigation("DiseasesDiabetes");

                    b.Navigation("DiseasesDigestiveDisorders");

                    b.Navigation("DiseasesFamilyMembers");

                    b.Navigation("FemaleMentalStates");

                    b.Navigation("FoodHabits");

                    b.Navigation("FoodHabitsMoods");

                    b.Navigation("FoodTimes");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.NewsPaper", b =>
                {
                    b.Navigation("Press");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.PressType", b =>
                {
                    b.Navigation("Press");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.Status", b =>
                {
                    b.Navigation("TaylanK");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.User", b =>
                {
                    b.Navigation("AppointmentDetail");

                    b.Navigation("Blog");

                    b.Navigation("DietLists");

                    b.Navigation("Lab");

                    b.Navigation("TaylanK")
                        .IsRequired();
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.VideoCategory", b =>
                {
                    b.Navigation("Videos");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.Workshop", b =>
                {
                    b.Navigation("WorkShopApplicationForm");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.WorkshopEducation", b =>
                {
                    b.Navigation("Workshop");

                    b.Navigation("WorkshopCategory");
                });

            modelBuilder.Entity("MVCBlogApp.Domain.Entities.WorkshopType", b =>
                {
                    b.Navigation("WorkShop");
                });
#pragma warning restore 612, 618
        }
    }
}
